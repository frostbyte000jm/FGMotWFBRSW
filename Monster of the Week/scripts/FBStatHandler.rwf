<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>FBStatHandler</ScriptName>
    <FolderID>28</FolderID>
    <Script>
local n = 0;
function count(bReset)
	if bReset then
		n = 0;
	end
	n = n+1;
	return n;
end
--[[
Warning: This page has LanguageUpdates
*****************************************************
			Stat Lists
*****************************************************
]]--
StatList = { --FBStatHandler.StatList.StatTypes.Attributes.Skills.Resources
	StatTypes = {
		Attributes = {count(true), "Att"},
		Skills = {count(), "Skl"},
		Resources = {count(), "Res"},
	},
	rStatTypesFull = { --FBStatHandler.StatList.rStatTypesFull
		Attribute = {count(true), "Attribute"},
		Skill = {count(), "Skill"},
		Resource = {count(), "Resource"}, --Located in the ResourceManager
	},
	Skills = { --FBStatHandler.StatList.Skills.Talents.Skills.Knowledges
		Talents = {
			Charm = {count(true), "Charm"},
								
		},	
	},
	Attributes = { --FBStatHandler.StatList.Attributes.Physical.Social.Mental
		Physical = {
			Charm = {count(true), "Charm"},
			Cool = {count(), "Cool"},
			Sharp = {count(), "Sharp"},
			Tough = {count(), "Tough"},--Debug.note In templateTemplate, note up stamina that it has properties.
			Weird = {count(), "Weird"},	
		},					
	},	
	Specialties = {
		Initiative = {count(true), "Initiative"},
	},	
}

function getAttributes()
	local rSkills = Funct.TableConcat(StatList.Attributes.Physical,StatList.Attributes.Social);
	rSkills = Funct.TableConcat(rSkills, StatList.Attributes.Mental);
	return rSkills;
end

function getSkills()
	local rSkills = Funct.TableConcat(StatList.Skills.Talents,StatList.Skills.Skills);
	rSkills = Funct.TableConcat(rSkills, StatList.Skills.Knowledges);
	return rSkills;
end

function getAllStats()
	local rSkills = Funct.TableConcat(getAttributes(),getSkills());
	rSkills = Funct.TableConcat(rSkills,FBResourceManager.getResources());
	return rSkills;
end

--[[
*****************************************************
				Stat Update

This will look at the stat name, and then choose 
the next action(s). If a stat controls another 
stat, this is where we should create a method for it. 
*****************************************************
]]--

function CallStatUpdate(nodeChar,nodeSkill)
	local sStat = DB.getValue(nodeSkill, "str_skill_name","");
	
--	if sStat == StatList.Attributes.Physical.Stamina[2] then
--		updateHealth(nodeChar);
--	
--	end
end

--[[
*****************************************************
		local functions to handle updates
*****************************************************
]]--

function updateHealth(nodeChar)
	-- set Base
	local nBase = 6;
	--get Stats
	rStats = {StatList.Attributes.Physical.Stamina[2],};
	local rStatRecords = FBStatManager.GetStats(nodeChar, rStats);
	
	--loop through and add up the Values
	local nValue = nBase;
	for _, rStat in pairs(rStatRecords) do		
		nValue = nValue + rStat["nValue"];
	end
	
	-- place Value
	DB.setValue(nodeChar, "num_health_base", "number", nValue);
end
</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>